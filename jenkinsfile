pipeline {
    agent any

    parameters {
        choice(name: 'TF_ACTION', choices: ['plan', 'apply', 'destroy'], description: 'Terraform action')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        TF_DIR = "infra/terraform"
        ANSIBLE_DIR = "infra/ansible"
        PEM_PATH = "/var/lib/jenkins/.ssh/secondaccount.pem"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Terraform Init') {
            steps {
                dir("${TF_DIR}") {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Action') {
            steps {
                dir("${TF_DIR}") {
                    script {
                        if (params.TF_ACTION == 'plan') {
                            sh 'terraform plan'
                        } else if (params.TF_ACTION == 'apply') {
                            sh 'terraform apply -auto-approve'
                        } else if (params.TF_ACTION == 'destroy') {
                            sh 'terraform destroy -auto-approve'
                        }
                    }
                }
            }
        }

        stage('Run Ansible Directly') {
            when {
                expression { params.TF_ACTION == 'apply' }
            }
            steps {
                dir("${TF_DIR}") {
                    script {
                        BASTION_IP = sh(script: "terraform output -raw bastion_public_ip", returnStdout: true).trim()
                        echo "Bastion Public IP: ${BASTION_IP}"
                    }
                }

                dir("${ANSIBLE_DIR}") {
                    sh """
                    ansible-playbook -i inventory/aws_ec2.yml check-playbook.yml --user ubuntu --private-key ${PEM_PATH} --ssh-extra-args="-o StrictHostKeyChecking=no"
                    """
                }
            }
        }
    }
}
